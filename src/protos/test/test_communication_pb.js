// source: test/test_communication.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var test_test_message_pb = require('../test/test_message_pb.js');
goog.object.extend(proto, test_test_message_pb);
var utils_utils_pb = require('../utils/utils_pb.js');
goog.object.extend(proto, utils_utils_pb);
goog.exportSymbol('proto.jisaem.test.RequestClassTestScoreGet', null, global);
goog.exportSymbol('proto.jisaem.test.RequestExpectedGradeUpdate', null, global);
goog.exportSymbol('proto.jisaem.test.RequestStudentTestScoreGet', null, global);
goog.exportSymbol('proto.jisaem.test.RequestTestCreate', null, global);
goog.exportSymbol('proto.jisaem.test.RequestTestDelete', null, global);
goog.exportSymbol('proto.jisaem.test.RequestTestGet', null, global);
goog.exportSymbol('proto.jisaem.test.RequestTestListGet', null, global);
goog.exportSymbol('proto.jisaem.test.RequestTestNextRoundGet', null, global);
goog.exportSymbol('proto.jisaem.test.RequestTestScoreUpdate', null, global);
goog.exportSymbol('proto.jisaem.test.RequestTestUpdate', null, global);
goog.exportSymbol('proto.jisaem.test.ResponseClassTestScoreGet', null, global);
goog.exportSymbol('proto.jisaem.test.ResponseExpectedGradeUpdate', null, global);
goog.exportSymbol('proto.jisaem.test.ResponseStudentTestScoreGet', null, global);
goog.exportSymbol('proto.jisaem.test.ResponseTestCreate', null, global);
goog.exportSymbol('proto.jisaem.test.ResponseTestDelete', null, global);
goog.exportSymbol('proto.jisaem.test.ResponseTestGet', null, global);
goog.exportSymbol('proto.jisaem.test.ResponseTestListGet', null, global);
goog.exportSymbol('proto.jisaem.test.ResponseTestNextRoundGet', null, global);
goog.exportSymbol('proto.jisaem.test.ResponseTestScoreUpdate', null, global);
goog.exportSymbol('proto.jisaem.test.ResponseTestUpdate', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.RequestTestCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.RequestTestCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.RequestTestCreate.displayName = 'proto.jisaem.test.RequestTestCreate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.ResponseTestCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.ResponseTestCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.ResponseTestCreate.displayName = 'proto.jisaem.test.ResponseTestCreate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.RequestTestGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.RequestTestGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.RequestTestGet.displayName = 'proto.jisaem.test.RequestTestGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.ResponseTestGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.ResponseTestGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.ResponseTestGet.displayName = 'proto.jisaem.test.ResponseTestGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.RequestTestListGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jisaem.test.RequestTestListGet.repeatedFields_, null);
};
goog.inherits(proto.jisaem.test.RequestTestListGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.RequestTestListGet.displayName = 'proto.jisaem.test.RequestTestListGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.ResponseTestListGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jisaem.test.ResponseTestListGet.repeatedFields_, null);
};
goog.inherits(proto.jisaem.test.ResponseTestListGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.ResponseTestListGet.displayName = 'proto.jisaem.test.ResponseTestListGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.RequestTestUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.RequestTestUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.RequestTestUpdate.displayName = 'proto.jisaem.test.RequestTestUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.ResponseTestUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.ResponseTestUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.ResponseTestUpdate.displayName = 'proto.jisaem.test.ResponseTestUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.RequestTestDelete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jisaem.test.RequestTestDelete.repeatedFields_, null);
};
goog.inherits(proto.jisaem.test.RequestTestDelete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.RequestTestDelete.displayName = 'proto.jisaem.test.RequestTestDelete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.ResponseTestDelete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.ResponseTestDelete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.ResponseTestDelete.displayName = 'proto.jisaem.test.ResponseTestDelete';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.RequestTestNextRoundGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.RequestTestNextRoundGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.RequestTestNextRoundGet.displayName = 'proto.jisaem.test.RequestTestNextRoundGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.ResponseTestNextRoundGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.ResponseTestNextRoundGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.ResponseTestNextRoundGet.displayName = 'proto.jisaem.test.ResponseTestNextRoundGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.RequestExpectedGradeUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jisaem.test.RequestExpectedGradeUpdate.repeatedFields_, null);
};
goog.inherits(proto.jisaem.test.RequestExpectedGradeUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.RequestExpectedGradeUpdate.displayName = 'proto.jisaem.test.RequestExpectedGradeUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.ResponseExpectedGradeUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.ResponseExpectedGradeUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.ResponseExpectedGradeUpdate.displayName = 'proto.jisaem.test.ResponseExpectedGradeUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.RequestTestScoreUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.jisaem.test.RequestTestScoreUpdate.repeatedFields_, null);
};
goog.inherits(proto.jisaem.test.RequestTestScoreUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.RequestTestScoreUpdate.displayName = 'proto.jisaem.test.RequestTestScoreUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.ResponseTestScoreUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.ResponseTestScoreUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.ResponseTestScoreUpdate.displayName = 'proto.jisaem.test.ResponseTestScoreUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.RequestClassTestScoreGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.RequestClassTestScoreGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.RequestClassTestScoreGet.displayName = 'proto.jisaem.test.RequestClassTestScoreGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.ResponseClassTestScoreGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.ResponseClassTestScoreGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.ResponseClassTestScoreGet.displayName = 'proto.jisaem.test.ResponseClassTestScoreGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.RequestStudentTestScoreGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.RequestStudentTestScoreGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.RequestStudentTestScoreGet.displayName = 'proto.jisaem.test.RequestStudentTestScoreGet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jisaem.test.ResponseStudentTestScoreGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jisaem.test.ResponseStudentTestScoreGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.jisaem.test.ResponseStudentTestScoreGet.displayName = 'proto.jisaem.test.ResponseStudentTestScoreGet';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.RequestTestCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.RequestTestCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.RequestTestCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    classUid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    test: (f = msg.getTest()) && test_test_message_pb.Test.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.RequestTestCreate}
 */
proto.jisaem.test.RequestTestCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.RequestTestCreate;
  return proto.jisaem.test.RequestTestCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.RequestTestCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.RequestTestCreate}
 */
proto.jisaem.test.RequestTestCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassUid(value);
      break;
    case 2:
      var value = new test_test_message_pb.Test;
      reader.readMessage(value,test_test_message_pb.Test.deserializeBinaryFromReader);
      msg.setTest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.RequestTestCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.RequestTestCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.RequestTestCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      test_test_message_pb.Test.serializeBinaryToWriter
    );
  }
};


/**
 * optional string class_uid = 1;
 * @return {string}
 */
proto.jisaem.test.RequestTestCreate.prototype.getClassUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestTestCreate} returns this
 */
proto.jisaem.test.RequestTestCreate.prototype.setClassUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Test test = 2;
 * @return {?proto.jisaem.test.Test}
 */
proto.jisaem.test.RequestTestCreate.prototype.getTest = function() {
  return /** @type{?proto.jisaem.test.Test} */ (
    jspb.Message.getWrapperField(this, test_test_message_pb.Test, 2));
};


/**
 * @param {?proto.jisaem.test.Test|undefined} value
 * @return {!proto.jisaem.test.RequestTestCreate} returns this
*/
proto.jisaem.test.RequestTestCreate.prototype.setTest = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jisaem.test.RequestTestCreate} returns this
 */
proto.jisaem.test.RequestTestCreate.prototype.clearTest = function() {
  return this.setTest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.RequestTestCreate.prototype.hasTest = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.ResponseTestCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.ResponseTestCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.ResponseTestCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    test: (f = msg.getTest()) && test_test_message_pb.Test.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.ResponseTestCreate}
 */
proto.jisaem.test.ResponseTestCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.ResponseTestCreate;
  return proto.jisaem.test.ResponseTestCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.ResponseTestCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.ResponseTestCreate}
 */
proto.jisaem.test.ResponseTestCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new test_test_message_pb.Test;
      reader.readMessage(value,test_test_message_pb.Test.deserializeBinaryFromReader);
      msg.setTest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.ResponseTestCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.ResponseTestCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.ResponseTestCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      test_test_message_pb.Test.serializeBinaryToWriter
    );
  }
};


/**
 * optional Test test = 1;
 * @return {?proto.jisaem.test.Test}
 */
proto.jisaem.test.ResponseTestCreate.prototype.getTest = function() {
  return /** @type{?proto.jisaem.test.Test} */ (
    jspb.Message.getWrapperField(this, test_test_message_pb.Test, 1));
};


/**
 * @param {?proto.jisaem.test.Test|undefined} value
 * @return {!proto.jisaem.test.ResponseTestCreate} returns this
*/
proto.jisaem.test.ResponseTestCreate.prototype.setTest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jisaem.test.ResponseTestCreate} returns this
 */
proto.jisaem.test.ResponseTestCreate.prototype.clearTest = function() {
  return this.setTest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.ResponseTestCreate.prototype.hasTest = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.RequestTestGet.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.RequestTestGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.RequestTestGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    classUid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    testUid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.RequestTestGet}
 */
proto.jisaem.test.RequestTestGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.RequestTestGet;
  return proto.jisaem.test.RequestTestGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.RequestTestGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.RequestTestGet}
 */
proto.jisaem.test.RequestTestGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.RequestTestGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.RequestTestGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.RequestTestGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTestUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string class_uid = 1;
 * @return {string}
 */
proto.jisaem.test.RequestTestGet.prototype.getClassUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestTestGet} returns this
 */
proto.jisaem.test.RequestTestGet.prototype.setClassUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string test_uid = 2;
 * @return {string}
 */
proto.jisaem.test.RequestTestGet.prototype.getTestUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestTestGet} returns this
 */
proto.jisaem.test.RequestTestGet.prototype.setTestUid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.ResponseTestGet.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.ResponseTestGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.ResponseTestGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    test: (f = msg.getTest()) && test_test_message_pb.Test.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.ResponseTestGet}
 */
proto.jisaem.test.ResponseTestGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.ResponseTestGet;
  return proto.jisaem.test.ResponseTestGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.ResponseTestGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.ResponseTestGet}
 */
proto.jisaem.test.ResponseTestGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new test_test_message_pb.Test;
      reader.readMessage(value,test_test_message_pb.Test.deserializeBinaryFromReader);
      msg.setTest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.ResponseTestGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.ResponseTestGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.ResponseTestGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      test_test_message_pb.Test.serializeBinaryToWriter
    );
  }
};


/**
 * optional Test test = 1;
 * @return {?proto.jisaem.test.Test}
 */
proto.jisaem.test.ResponseTestGet.prototype.getTest = function() {
  return /** @type{?proto.jisaem.test.Test} */ (
    jspb.Message.getWrapperField(this, test_test_message_pb.Test, 1));
};


/**
 * @param {?proto.jisaem.test.Test|undefined} value
 * @return {!proto.jisaem.test.ResponseTestGet} returns this
*/
proto.jisaem.test.ResponseTestGet.prototype.setTest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jisaem.test.ResponseTestGet} returns this
 */
proto.jisaem.test.ResponseTestGet.prototype.clearTest = function() {
  return this.setTest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.ResponseTestGet.prototype.hasTest = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jisaem.test.RequestTestListGet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.RequestTestListGet.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.RequestTestListGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.RequestTestListGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestListGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    testLabelUidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    closedTest: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    pagination: (f = msg.getPagination()) && utils_utils_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.RequestTestListGet}
 */
proto.jisaem.test.RequestTestListGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.RequestTestListGet;
  return proto.jisaem.test.RequestTestListGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.RequestTestListGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.RequestTestListGet}
 */
proto.jisaem.test.RequestTestListGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTestLabelUids(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClosedTest(value);
      break;
    case 3:
      var value = new utils_utils_pb.Pagination;
      reader.readMessage(value,utils_utils_pb.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.RequestTestListGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.RequestTestListGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.RequestTestListGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestListGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestLabelUidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getClosedTest();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      utils_utils_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string test_label_uids = 1;
 * @return {!Array<string>}
 */
proto.jisaem.test.RequestTestListGet.prototype.getTestLabelUidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.jisaem.test.RequestTestListGet} returns this
 */
proto.jisaem.test.RequestTestListGet.prototype.setTestLabelUidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.jisaem.test.RequestTestListGet} returns this
 */
proto.jisaem.test.RequestTestListGet.prototype.addTestLabelUids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jisaem.test.RequestTestListGet} returns this
 */
proto.jisaem.test.RequestTestListGet.prototype.clearTestLabelUidsList = function() {
  return this.setTestLabelUidsList([]);
};


/**
 * optional bool closed_test = 2;
 * @return {boolean}
 */
proto.jisaem.test.RequestTestListGet.prototype.getClosedTest = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.jisaem.test.RequestTestListGet} returns this
 */
proto.jisaem.test.RequestTestListGet.prototype.setClosedTest = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional jisaem.utils.Pagination pagination = 3;
 * @return {?proto.jisaem.utils.Pagination}
 */
proto.jisaem.test.RequestTestListGet.prototype.getPagination = function() {
  return /** @type{?proto.jisaem.utils.Pagination} */ (
    jspb.Message.getWrapperField(this, utils_utils_pb.Pagination, 3));
};


/**
 * @param {?proto.jisaem.utils.Pagination|undefined} value
 * @return {!proto.jisaem.test.RequestTestListGet} returns this
*/
proto.jisaem.test.RequestTestListGet.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jisaem.test.RequestTestListGet} returns this
 */
proto.jisaem.test.RequestTestListGet.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.RequestTestListGet.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jisaem.test.ResponseTestListGet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.ResponseTestListGet.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.ResponseTestListGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.ResponseTestListGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestListGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    testsList: jspb.Message.toObjectList(msg.getTestsList(),
    test_test_message_pb.Test.toObject, includeInstance),
    pagination: (f = msg.getPagination()) && utils_utils_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.ResponseTestListGet}
 */
proto.jisaem.test.ResponseTestListGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.ResponseTestListGet;
  return proto.jisaem.test.ResponseTestListGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.ResponseTestListGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.ResponseTestListGet}
 */
proto.jisaem.test.ResponseTestListGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new test_test_message_pb.Test;
      reader.readMessage(value,test_test_message_pb.Test.deserializeBinaryFromReader);
      msg.addTests(value);
      break;
    case 2:
      var value = new utils_utils_pb.Pagination;
      reader.readMessage(value,utils_utils_pb.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.ResponseTestListGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.ResponseTestListGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.ResponseTestListGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestListGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      test_test_message_pb.Test.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      utils_utils_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Test tests = 1;
 * @return {!Array<!proto.jisaem.test.Test>}
 */
proto.jisaem.test.ResponseTestListGet.prototype.getTestsList = function() {
  return /** @type{!Array<!proto.jisaem.test.Test>} */ (
    jspb.Message.getRepeatedWrapperField(this, test_test_message_pb.Test, 1));
};


/**
 * @param {!Array<!proto.jisaem.test.Test>} value
 * @return {!proto.jisaem.test.ResponseTestListGet} returns this
*/
proto.jisaem.test.ResponseTestListGet.prototype.setTestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.jisaem.test.Test=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jisaem.test.Test}
 */
proto.jisaem.test.ResponseTestListGet.prototype.addTests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.jisaem.test.Test, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jisaem.test.ResponseTestListGet} returns this
 */
proto.jisaem.test.ResponseTestListGet.prototype.clearTestsList = function() {
  return this.setTestsList([]);
};


/**
 * optional jisaem.utils.Pagination pagination = 2;
 * @return {?proto.jisaem.utils.Pagination}
 */
proto.jisaem.test.ResponseTestListGet.prototype.getPagination = function() {
  return /** @type{?proto.jisaem.utils.Pagination} */ (
    jspb.Message.getWrapperField(this, utils_utils_pb.Pagination, 2));
};


/**
 * @param {?proto.jisaem.utils.Pagination|undefined} value
 * @return {!proto.jisaem.test.ResponseTestListGet} returns this
*/
proto.jisaem.test.ResponseTestListGet.prototype.setPagination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jisaem.test.ResponseTestListGet} returns this
 */
proto.jisaem.test.ResponseTestListGet.prototype.clearPagination = function() {
  return this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.ResponseTestListGet.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.RequestTestUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.RequestTestUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.RequestTestUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    classUid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    testUid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    round: jspb.Message.getFieldWithDefault(msg, 5, 0),
    testLabelUid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    exposeRankType: jspb.Message.getFieldWithDefault(msg, 7, 0),
    startAt: (f = msg.getStartAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    endAt: (f = msg.getEndAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    close: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    publicExpose: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.RequestTestUpdate}
 */
proto.jisaem.test.RequestTestUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.RequestTestUpdate;
  return proto.jisaem.test.RequestTestUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.RequestTestUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.RequestTestUpdate}
 */
proto.jisaem.test.RequestTestUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestUid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRound(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestLabelUid(value);
      break;
    case 7:
      var value = /** @type {!proto.jisaem.test.ExposeRankType} */ (reader.readEnum());
      msg.setExposeRankType(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartAt(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEndAt(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClose(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPublicExpose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.RequestTestUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.RequestTestUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.RequestTestUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTestUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {!proto.jisaem.test.ExposeRankType} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getStartAt();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEndAt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional string class_uid = 1;
 * @return {string}
 */
proto.jisaem.test.RequestTestUpdate.prototype.getClassUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.setClassUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string test_uid = 2;
 * @return {string}
 */
proto.jisaem.test.RequestTestUpdate.prototype.getTestUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.setTestUid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.jisaem.test.RequestTestUpdate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.RequestTestUpdate.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.jisaem.test.RequestTestUpdate.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.RequestTestUpdate.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 round = 5;
 * @return {number}
 */
proto.jisaem.test.RequestTestUpdate.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.setRound = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.clearRound = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.RequestTestUpdate.prototype.hasRound = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string test_label_uid = 6;
 * @return {string}
 */
proto.jisaem.test.RequestTestUpdate.prototype.getTestLabelUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.setTestLabelUid = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.clearTestLabelUid = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.RequestTestUpdate.prototype.hasTestLabelUid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ExposeRankType expose_rank_type = 7;
 * @return {!proto.jisaem.test.ExposeRankType}
 */
proto.jisaem.test.RequestTestUpdate.prototype.getExposeRankType = function() {
  return /** @type {!proto.jisaem.test.ExposeRankType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.jisaem.test.ExposeRankType} value
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.setExposeRankType = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.clearExposeRankType = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.RequestTestUpdate.prototype.hasExposeRankType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional google.protobuf.Timestamp start_at = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.jisaem.test.RequestTestUpdate.prototype.getStartAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
*/
proto.jisaem.test.RequestTestUpdate.prototype.setStartAt = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.clearStartAt = function() {
  return this.setStartAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.RequestTestUpdate.prototype.hasStartAt = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional google.protobuf.Timestamp end_at = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.jisaem.test.RequestTestUpdate.prototype.getEndAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
*/
proto.jisaem.test.RequestTestUpdate.prototype.setEndAt = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.clearEndAt = function() {
  return this.setEndAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.RequestTestUpdate.prototype.hasEndAt = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool close = 10;
 * @return {boolean}
 */
proto.jisaem.test.RequestTestUpdate.prototype.getClose = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.setClose = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.clearClose = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.RequestTestUpdate.prototype.hasClose = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool public_expose = 11;
 * @return {boolean}
 */
proto.jisaem.test.RequestTestUpdate.prototype.getPublicExpose = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.setPublicExpose = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.jisaem.test.RequestTestUpdate} returns this
 */
proto.jisaem.test.RequestTestUpdate.prototype.clearPublicExpose = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.jisaem.test.RequestTestUpdate.prototype.hasPublicExpose = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.ResponseTestUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.ResponseTestUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.ResponseTestUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.ResponseTestUpdate}
 */
proto.jisaem.test.ResponseTestUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.ResponseTestUpdate;
  return proto.jisaem.test.ResponseTestUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.ResponseTestUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.ResponseTestUpdate}
 */
proto.jisaem.test.ResponseTestUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.ResponseTestUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.ResponseTestUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.ResponseTestUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jisaem.test.RequestTestDelete.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.RequestTestDelete.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.RequestTestDelete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.RequestTestDelete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestDelete.toObject = function(includeInstance, msg) {
  var f, obj = {
    testUidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.RequestTestDelete}
 */
proto.jisaem.test.RequestTestDelete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.RequestTestDelete;
  return proto.jisaem.test.RequestTestDelete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.RequestTestDelete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.RequestTestDelete}
 */
proto.jisaem.test.RequestTestDelete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTestUids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.RequestTestDelete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.RequestTestDelete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.RequestTestDelete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestDelete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTestUidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string test_uids = 1;
 * @return {!Array<string>}
 */
proto.jisaem.test.RequestTestDelete.prototype.getTestUidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.jisaem.test.RequestTestDelete} returns this
 */
proto.jisaem.test.RequestTestDelete.prototype.setTestUidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.jisaem.test.RequestTestDelete} returns this
 */
proto.jisaem.test.RequestTestDelete.prototype.addTestUids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jisaem.test.RequestTestDelete} returns this
 */
proto.jisaem.test.RequestTestDelete.prototype.clearTestUidsList = function() {
  return this.setTestUidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.ResponseTestDelete.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.ResponseTestDelete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.ResponseTestDelete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestDelete.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.ResponseTestDelete}
 */
proto.jisaem.test.ResponseTestDelete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.ResponseTestDelete;
  return proto.jisaem.test.ResponseTestDelete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.ResponseTestDelete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.ResponseTestDelete}
 */
proto.jisaem.test.ResponseTestDelete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.ResponseTestDelete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.ResponseTestDelete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.ResponseTestDelete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestDelete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.RequestTestNextRoundGet.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.RequestTestNextRoundGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.RequestTestNextRoundGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestNextRoundGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    classUid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.RequestTestNextRoundGet}
 */
proto.jisaem.test.RequestTestNextRoundGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.RequestTestNextRoundGet;
  return proto.jisaem.test.RequestTestNextRoundGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.RequestTestNextRoundGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.RequestTestNextRoundGet}
 */
proto.jisaem.test.RequestTestNextRoundGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.RequestTestNextRoundGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.RequestTestNextRoundGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.RequestTestNextRoundGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestNextRoundGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string class_uid = 1;
 * @return {string}
 */
proto.jisaem.test.RequestTestNextRoundGet.prototype.getClassUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestTestNextRoundGet} returns this
 */
proto.jisaem.test.RequestTestNextRoundGet.prototype.setClassUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.ResponseTestNextRoundGet.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.ResponseTestNextRoundGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.ResponseTestNextRoundGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestNextRoundGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    nextRound: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.ResponseTestNextRoundGet}
 */
proto.jisaem.test.ResponseTestNextRoundGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.ResponseTestNextRoundGet;
  return proto.jisaem.test.ResponseTestNextRoundGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.ResponseTestNextRoundGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.ResponseTestNextRoundGet}
 */
proto.jisaem.test.ResponseTestNextRoundGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.ResponseTestNextRoundGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.ResponseTestNextRoundGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.ResponseTestNextRoundGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestNextRoundGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNextRound();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 next_round = 1;
 * @return {number}
 */
proto.jisaem.test.ResponseTestNextRoundGet.prototype.getNextRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.jisaem.test.ResponseTestNextRoundGet} returns this
 */
proto.jisaem.test.ResponseTestNextRoundGet.prototype.setNextRound = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jisaem.test.RequestExpectedGradeUpdate.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.RequestExpectedGradeUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.RequestExpectedGradeUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.RequestExpectedGradeUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestExpectedGradeUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    classUid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    testUid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    expectedGradesList: jspb.Message.toObjectList(msg.getExpectedGradesList(),
    test_test_message_pb.TestExpectedGrade.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.RequestExpectedGradeUpdate}
 */
proto.jisaem.test.RequestExpectedGradeUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.RequestExpectedGradeUpdate;
  return proto.jisaem.test.RequestExpectedGradeUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.RequestExpectedGradeUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.RequestExpectedGradeUpdate}
 */
proto.jisaem.test.RequestExpectedGradeUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestUid(value);
      break;
    case 3:
      var value = new test_test_message_pb.TestExpectedGrade;
      reader.readMessage(value,test_test_message_pb.TestExpectedGrade.deserializeBinaryFromReader);
      msg.addExpectedGrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.RequestExpectedGradeUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.RequestExpectedGradeUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.RequestExpectedGradeUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestExpectedGradeUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTestUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExpectedGradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      test_test_message_pb.TestExpectedGrade.serializeBinaryToWriter
    );
  }
};


/**
 * optional string class_uid = 1;
 * @return {string}
 */
proto.jisaem.test.RequestExpectedGradeUpdate.prototype.getClassUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestExpectedGradeUpdate} returns this
 */
proto.jisaem.test.RequestExpectedGradeUpdate.prototype.setClassUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string test_uid = 2;
 * @return {string}
 */
proto.jisaem.test.RequestExpectedGradeUpdate.prototype.getTestUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestExpectedGradeUpdate} returns this
 */
proto.jisaem.test.RequestExpectedGradeUpdate.prototype.setTestUid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated TestExpectedGrade expected_grades = 3;
 * @return {!Array<!proto.jisaem.test.TestExpectedGrade>}
 */
proto.jisaem.test.RequestExpectedGradeUpdate.prototype.getExpectedGradesList = function() {
  return /** @type{!Array<!proto.jisaem.test.TestExpectedGrade>} */ (
    jspb.Message.getRepeatedWrapperField(this, test_test_message_pb.TestExpectedGrade, 3));
};


/**
 * @param {!Array<!proto.jisaem.test.TestExpectedGrade>} value
 * @return {!proto.jisaem.test.RequestExpectedGradeUpdate} returns this
*/
proto.jisaem.test.RequestExpectedGradeUpdate.prototype.setExpectedGradesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.jisaem.test.TestExpectedGrade=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jisaem.test.TestExpectedGrade}
 */
proto.jisaem.test.RequestExpectedGradeUpdate.prototype.addExpectedGrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.jisaem.test.TestExpectedGrade, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jisaem.test.RequestExpectedGradeUpdate} returns this
 */
proto.jisaem.test.RequestExpectedGradeUpdate.prototype.clearExpectedGradesList = function() {
  return this.setExpectedGradesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.ResponseExpectedGradeUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.ResponseExpectedGradeUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.ResponseExpectedGradeUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseExpectedGradeUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.ResponseExpectedGradeUpdate}
 */
proto.jisaem.test.ResponseExpectedGradeUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.ResponseExpectedGradeUpdate;
  return proto.jisaem.test.ResponseExpectedGradeUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.ResponseExpectedGradeUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.ResponseExpectedGradeUpdate}
 */
proto.jisaem.test.ResponseExpectedGradeUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.ResponseExpectedGradeUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.ResponseExpectedGradeUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.ResponseExpectedGradeUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseExpectedGradeUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.jisaem.test.RequestTestScoreUpdate.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.RequestTestScoreUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.RequestTestScoreUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.RequestTestScoreUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestScoreUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    classUid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    testUid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scoresList: jspb.Message.toObjectList(msg.getScoresList(),
    test_test_message_pb.TestScore.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.RequestTestScoreUpdate}
 */
proto.jisaem.test.RequestTestScoreUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.RequestTestScoreUpdate;
  return proto.jisaem.test.RequestTestScoreUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.RequestTestScoreUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.RequestTestScoreUpdate}
 */
proto.jisaem.test.RequestTestScoreUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestUid(value);
      break;
    case 3:
      var value = new test_test_message_pb.TestScore;
      reader.readMessage(value,test_test_message_pb.TestScore.deserializeBinaryFromReader);
      msg.addScores(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.RequestTestScoreUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.RequestTestScoreUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.RequestTestScoreUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestTestScoreUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTestUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScoresList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      test_test_message_pb.TestScore.serializeBinaryToWriter
    );
  }
};


/**
 * optional string class_uid = 1;
 * @return {string}
 */
proto.jisaem.test.RequestTestScoreUpdate.prototype.getClassUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestTestScoreUpdate} returns this
 */
proto.jisaem.test.RequestTestScoreUpdate.prototype.setClassUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string test_uid = 2;
 * @return {string}
 */
proto.jisaem.test.RequestTestScoreUpdate.prototype.getTestUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestTestScoreUpdate} returns this
 */
proto.jisaem.test.RequestTestScoreUpdate.prototype.setTestUid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated TestScore scores = 3;
 * @return {!Array<!proto.jisaem.test.TestScore>}
 */
proto.jisaem.test.RequestTestScoreUpdate.prototype.getScoresList = function() {
  return /** @type{!Array<!proto.jisaem.test.TestScore>} */ (
    jspb.Message.getRepeatedWrapperField(this, test_test_message_pb.TestScore, 3));
};


/**
 * @param {!Array<!proto.jisaem.test.TestScore>} value
 * @return {!proto.jisaem.test.RequestTestScoreUpdate} returns this
*/
proto.jisaem.test.RequestTestScoreUpdate.prototype.setScoresList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.jisaem.test.TestScore=} opt_value
 * @param {number=} opt_index
 * @return {!proto.jisaem.test.TestScore}
 */
proto.jisaem.test.RequestTestScoreUpdate.prototype.addScores = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.jisaem.test.TestScore, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.jisaem.test.RequestTestScoreUpdate} returns this
 */
proto.jisaem.test.RequestTestScoreUpdate.prototype.clearScoresList = function() {
  return this.setScoresList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.ResponseTestScoreUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.ResponseTestScoreUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.ResponseTestScoreUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestScoreUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.ResponseTestScoreUpdate}
 */
proto.jisaem.test.ResponseTestScoreUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.ResponseTestScoreUpdate;
  return proto.jisaem.test.ResponseTestScoreUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.ResponseTestScoreUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.ResponseTestScoreUpdate}
 */
proto.jisaem.test.ResponseTestScoreUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.ResponseTestScoreUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.ResponseTestScoreUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.ResponseTestScoreUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseTestScoreUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.RequestClassTestScoreGet.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.RequestClassTestScoreGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.RequestClassTestScoreGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestClassTestScoreGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    classUid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.RequestClassTestScoreGet}
 */
proto.jisaem.test.RequestClassTestScoreGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.RequestClassTestScoreGet;
  return proto.jisaem.test.RequestClassTestScoreGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.RequestClassTestScoreGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.RequestClassTestScoreGet}
 */
proto.jisaem.test.RequestClassTestScoreGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.RequestClassTestScoreGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.RequestClassTestScoreGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.RequestClassTestScoreGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestClassTestScoreGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string class_uid = 1;
 * @return {string}
 */
proto.jisaem.test.RequestClassTestScoreGet.prototype.getClassUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestClassTestScoreGet} returns this
 */
proto.jisaem.test.RequestClassTestScoreGet.prototype.setClassUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.ResponseClassTestScoreGet.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.ResponseClassTestScoreGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.ResponseClassTestScoreGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseClassTestScoreGet.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.ResponseClassTestScoreGet}
 */
proto.jisaem.test.ResponseClassTestScoreGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.ResponseClassTestScoreGet;
  return proto.jisaem.test.ResponseClassTestScoreGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.ResponseClassTestScoreGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.ResponseClassTestScoreGet}
 */
proto.jisaem.test.ResponseClassTestScoreGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.ResponseClassTestScoreGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.ResponseClassTestScoreGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.ResponseClassTestScoreGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseClassTestScoreGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.RequestStudentTestScoreGet.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.RequestStudentTestScoreGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.RequestStudentTestScoreGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestStudentTestScoreGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    classUid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.RequestStudentTestScoreGet}
 */
proto.jisaem.test.RequestStudentTestScoreGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.RequestStudentTestScoreGet;
  return proto.jisaem.test.RequestStudentTestScoreGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.RequestStudentTestScoreGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.RequestStudentTestScoreGet}
 */
proto.jisaem.test.RequestStudentTestScoreGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.RequestStudentTestScoreGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.RequestStudentTestScoreGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.RequestStudentTestScoreGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.RequestStudentTestScoreGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClassUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string class_uid = 1;
 * @return {string}
 */
proto.jisaem.test.RequestStudentTestScoreGet.prototype.getClassUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestStudentTestScoreGet} returns this
 */
proto.jisaem.test.RequestStudentTestScoreGet.prototype.setClassUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.jisaem.test.RequestStudentTestScoreGet.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.jisaem.test.RequestStudentTestScoreGet} returns this
 */
proto.jisaem.test.RequestStudentTestScoreGet.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jisaem.test.ResponseStudentTestScoreGet.prototype.toObject = function(opt_includeInstance) {
  return proto.jisaem.test.ResponseStudentTestScoreGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jisaem.test.ResponseStudentTestScoreGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseStudentTestScoreGet.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jisaem.test.ResponseStudentTestScoreGet}
 */
proto.jisaem.test.ResponseStudentTestScoreGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jisaem.test.ResponseStudentTestScoreGet;
  return proto.jisaem.test.ResponseStudentTestScoreGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jisaem.test.ResponseStudentTestScoreGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jisaem.test.ResponseStudentTestScoreGet}
 */
proto.jisaem.test.ResponseStudentTestScoreGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jisaem.test.ResponseStudentTestScoreGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jisaem.test.ResponseStudentTestScoreGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jisaem.test.ResponseStudentTestScoreGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jisaem.test.ResponseStudentTestScoreGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.jisaem.test);
